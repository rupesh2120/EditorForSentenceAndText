{"version":3,"sources":["components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","aboutText","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","class","backgroundColor","onChange","event","target","value","rows","newText","toUpperCase","document","getElementById","select","navigator","clipboard","writeText","split","length","defaultProps","Title","App","setMode","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"oMAGe,SAASA,EAAOC,GAC3B,OACI,mCAEF,sBAAKC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MAAzE,UACJ,mBAAGD,UAAU,eAAeE,KAAK,IAAjC,SAAsCH,EAAMI,QAC5C,wBAAQH,UAAU,iBAAiBI,KAAK,SAAS,cAAY,WAAW,cAAY,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAAtL,SACE,sBAAMJ,UAAU,0BAGlB,sBAAKA,UAAU,2BAA2BK,GAAG,yBAA7C,UACE,qBAAIL,UAAU,qBAAd,UACE,oBAAIA,UAAU,kBAAd,SACE,oBAAGA,UAAU,WAAWE,KAAK,IAA7B,UAAkCH,EAAMO,UAAxC,IAAmD,sBAAMN,UAAU,UAAhB,4BAErD,oBAAIA,UAAU,WAAd,SACE,mBAAGA,UAAU,WAAWE,KAAK,IAA7B,0BAOJ,sBAAKF,UAAS,sCAA8C,UAAbD,EAAME,KAAe,OAAO,SAA3E,UACE,uBAAOM,QAASR,EAAMS,WAAYR,UAAU,mBAAmBI,KAAK,WAAWC,GAAG,2BAClF,uBAAOL,UAAU,mBAAmBS,QAAQ,yBAA5C,yCC1BS,SAASC,EAASX,GAC7B,MAAwBY,mBAAS,mBAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAiBA,OACI,gCACQ,oBAAIC,MAAO,CAACC,MAAmB,SAAbhB,EAAME,KAAc,QAAQ,SAA9C,SAAyDF,EAAMiB,UAC/D,qBAAKC,MAAM,kBAAX,SACI,0BAAUH,MAAO,CAACI,gBAA6B,SAAbnB,EAAME,KAAc,OAAO,QAASc,MAAmB,SAAbhB,EAAME,KAAc,QAAQ,SAAUD,UAAU,eAAemB,SAdpI,SAACC,GACpBP,EAAQO,EAAMC,OAAOC,QAa4JA,MAAOV,EAAMP,GAAG,QAAQkB,KAAK,QAEtM,wBAAQvB,UAAU,uBAAuBO,QArB/B,WAClB,IAAIiB,EAAUZ,EAAKa,cACnBZ,EAAQW,IAmBA,kCACA,wBAAQxB,UAAU,wBAAwBO,QAbnC,WACf,IAAIK,EAAOc,SAASC,eAAe,SACnCf,EAAKgB,SACLC,UAAUC,UAAUC,UAAUnB,EAAKU,QAU3B,uBACA,sBAAKtB,UAAU,iBAAiBc,MAAO,CAACC,MAAmB,SAAbhB,EAAME,KAAc,QAAQ,SAA1E,UACI,mDACA,8BAAIW,EAAKoB,MAAM,KAAKC,OAApB,oBAA6CrB,EAAKqB,OAAlD,uBDUpBnC,EAAOoC,aAAe,CACtBC,MAAQ,iBACR7B,UAAW,mBETI8B,MA3Bf,WACE,MAAwBzB,mBAAS,SAAjC,mBAAOV,EAAP,KAAaoC,EAAb,KAeA,OACE,qCACA,cAACvC,EAAD,CAAQK,MAAQ,YAAYF,KAAMA,EAAMO,WAfvB,WACL,SAATP,GAEDoC,EAAQ,SACRX,SAASY,KAAKxB,MAAMI,gBAAkB,UAItCmB,EAAQ,QACRX,SAASY,KAAKxB,MAAMI,gBAAkB,WAOxC,qBAAKlB,UAAU,iBAAf,SACE,cAACU,EAAD,CAAUM,QAAQ,4BAA4Bf,KAAMA,UCd3CsC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxB,SAASC,eAAe,SAM1BY,K","file":"static/js/main.f42653f4.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <>\r\n\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n  <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n    <span className=\"navbar-toggler-icon\"></span>\r\n  </button>\r\n\r\n  <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n    <ul className=\"navbar-nav mr-auto\">\r\n      <li className=\"nav-item active\">\r\n        <a className=\"nav-link\" href=\"/\">{props.aboutText} <span className=\"sr-only\">(current)</span></a>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n        <a className=\"nav-link\" href=\"/\">Contact</a>\r\n      </li>\r\n    </ul>\r\n    {/* <form className=\"form-inline my-2 my-lg-0\">\r\n      <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n      <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\r\n    </form> */}\r\n    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n      <input onClick={props.toggleMode} className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n      <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n    </div>\r\n  </div>\r\n</nav>\r\n\r\n    </>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {title: PropTypes.string.isRequired, \r\n    aboutText: PropTypes.string}; \r\n\r\nNavbar.defaultProps = { \r\nTitle : 'Set title here',\r\naboutText: 'About text here'\r\n};\r\n","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState('Enter text here'); \r\n\r\n    const handleUpClick = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n                <h1 style={{color:props.mode==='dark'?'white':'black'}}>{props.heading}</h1>\r\n                <div class=\"form-group mb-3\">\r\n                    <textarea style={{backgroundColor:props.mode==='dark'?'grey':'white', color:props.mode==='dark'?'white':'black'}} className=\"form-control\" onChange={handleOnChange} value={text} id=\"myBox\" rows=\"3\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert To Uppercase</button>\r\n                <button className=\"btn btn-primary mx-2 \" onClick={handleCopy}>Copy text</button>\r\n                <div className=\"container my-3\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n                    <h1>Your Text Summary</h1>\r\n                    <p>{text.split(\" \").length} Your words have {text.length} characters</p>\r\n                </div>\r\n        \r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n\n  const toggleMode = () => {\n    if(mode === 'dark')\n    {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n    }\n    else\n    {\n      setMode('dark');\n      document.body.style.backgroundColor = 'grey';\n    }\n  }\n\n  return (\n    <>\n    <Navbar title = 'Textutils' mode={mode} toggleMode={toggleMode}/>\n    <div className=\"container my-3\">\n      <TextForm heading=\"Enter the text to analyze\" mode={mode} />\n      {/* <About /> */}\n    </div>\n    </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}